// Code generated by goa v3.18.2, DO NOT EDIT.
//
// Arnz client
//
// Command:
// $ goa gen goa.design/plugins/v3/arnz/example/design -o
// /Users/brendan.keane/Git/plugins/arnz//example

package arnz

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Arnz" service client.
type Client struct {
	CreateEndpoint goa.Endpoint
	ReadEndpoint   goa.Endpoint
	UpdateEndpoint goa.Endpoint
	DeleteEndpoint goa.Endpoint
	HealthEndpoint goa.Endpoint
}

// NewClient initializes a "Arnz" service client given the endpoints.
func NewClient(create, read, update, delete_, health goa.Endpoint) *Client {
	return &Client{
		CreateEndpoint: create,
		ReadEndpoint:   read,
		UpdateEndpoint: update,
		DeleteEndpoint: delete_,
		HealthEndpoint: health,
	}
}

// Create calls the "create" endpoint of the "Arnz" service.
func (c *Client) Create(ctx context.Context) (res *ResponseBody, err error) {
	var ires any
	ires, err = c.CreateEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*ResponseBody), nil
}

// Read calls the "read" endpoint of the "Arnz" service.
func (c *Client) Read(ctx context.Context) (res *ResponseBody, err error) {
	var ires any
	ires, err = c.ReadEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*ResponseBody), nil
}

// Update calls the "update" endpoint of the "Arnz" service.
func (c *Client) Update(ctx context.Context) (res *ResponseBody, err error) {
	var ires any
	ires, err = c.UpdateEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*ResponseBody), nil
}

// Delete calls the "delete" endpoint of the "Arnz" service.
func (c *Client) Delete(ctx context.Context) (res *ResponseBody, err error) {
	var ires any
	ires, err = c.DeleteEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*ResponseBody), nil
}

// Health calls the "health" endpoint of the "Arnz" service.
func (c *Client) Health(ctx context.Context) (res *ResponseBody, err error) {
	var ires any
	ires, err = c.HealthEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*ResponseBody), nil
}
